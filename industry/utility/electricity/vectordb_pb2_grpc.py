# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import vectordb_pb2 as vectordb__pb2


class VectorDBStub(object):
    """The vector database service definition.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Search = channel.unary_unary(
                '/vectordb.VectorDB/Search',
                request_serializer=vectordb__pb2.VectorSearchRequest.SerializeToString,
                response_deserializer=vectordb__pb2.VectorSearchResponse.FromString,
                )
        self.BatchWrite = channel.unary_unary(
                '/vectordb.VectorDB/BatchWrite',
                request_serializer=vectordb__pb2.VectorBatchWriteRequest.SerializeToString,
                response_deserializer=vectordb__pb2.VectorWriteResponse.FromString,
                )
        self.Write = channel.unary_unary(
                '/vectordb.VectorDB/Write',
                request_serializer=vectordb__pb2.VectorWriteRequest.SerializeToString,
                response_deserializer=vectordb__pb2.VectorWriteResponse.FromString,
                )
        self.Read = channel.unary_unary(
                '/vectordb.VectorDB/Read',
                request_serializer=vectordb__pb2.VectorReadRequest.SerializeToString,
                response_deserializer=vectordb__pb2.VectorReadResponse.FromString,
                )
        self.Update = channel.unary_unary(
                '/vectordb.VectorDB/Update',
                request_serializer=vectordb__pb2.VectorUpdateRequest.SerializeToString,
                response_deserializer=vectordb__pb2.VectorUpdateResponse.FromString,
                )
        self.Delete = channel.unary_unary(
                '/vectordb.VectorDB/Delete',
                request_serializer=vectordb__pb2.VectorDeleteRequest.SerializeToString,
                response_deserializer=vectordb__pb2.VectorDeleteResponse.FromString,
                )


class VectorDBServicer(object):
    """The vector database service definition.
    """

    def Search(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BatchWrite(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Write(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Read(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Update(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Delete(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_VectorDBServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Search': grpc.unary_unary_rpc_method_handler(
                    servicer.Search,
                    request_deserializer=vectordb__pb2.VectorSearchRequest.FromString,
                    response_serializer=vectordb__pb2.VectorSearchResponse.SerializeToString,
            ),
            'BatchWrite': grpc.unary_unary_rpc_method_handler(
                    servicer.BatchWrite,
                    request_deserializer=vectordb__pb2.VectorBatchWriteRequest.FromString,
                    response_serializer=vectordb__pb2.VectorWriteResponse.SerializeToString,
            ),
            'Write': grpc.unary_unary_rpc_method_handler(
                    servicer.Write,
                    request_deserializer=vectordb__pb2.VectorWriteRequest.FromString,
                    response_serializer=vectordb__pb2.VectorWriteResponse.SerializeToString,
            ),
            'Read': grpc.unary_unary_rpc_method_handler(
                    servicer.Read,
                    request_deserializer=vectordb__pb2.VectorReadRequest.FromString,
                    response_serializer=vectordb__pb2.VectorReadResponse.SerializeToString,
            ),
            'Update': grpc.unary_unary_rpc_method_handler(
                    servicer.Update,
                    request_deserializer=vectordb__pb2.VectorUpdateRequest.FromString,
                    response_serializer=vectordb__pb2.VectorUpdateResponse.SerializeToString,
            ),
            'Delete': grpc.unary_unary_rpc_method_handler(
                    servicer.Delete,
                    request_deserializer=vectordb__pb2.VectorDeleteRequest.FromString,
                    response_serializer=vectordb__pb2.VectorDeleteResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'vectordb.VectorDB', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class VectorDB(object):
    """The vector database service definition.
    """

    @staticmethod
    def Search(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/vectordb.VectorDB/Search',
            vectordb__pb2.VectorSearchRequest.SerializeToString,
            vectordb__pb2.VectorSearchResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def BatchWrite(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/vectordb.VectorDB/BatchWrite',
            vectordb__pb2.VectorBatchWriteRequest.SerializeToString,
            vectordb__pb2.VectorWriteResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Write(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/vectordb.VectorDB/Write',
            vectordb__pb2.VectorWriteRequest.SerializeToString,
            vectordb__pb2.VectorWriteResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Read(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/vectordb.VectorDB/Read',
            vectordb__pb2.VectorReadRequest.SerializeToString,
            vectordb__pb2.VectorReadResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Update(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/vectordb.VectorDB/Update',
            vectordb__pb2.VectorUpdateRequest.SerializeToString,
            vectordb__pb2.VectorUpdateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Delete(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/vectordb.VectorDB/Delete',
            vectordb__pb2.VectorDeleteRequest.SerializeToString,
            vectordb__pb2.VectorDeleteResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
